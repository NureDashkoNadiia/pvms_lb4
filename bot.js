const TelegramBot = require("node-telegram-bot-api");
const fs = require("fs");

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
const sportsData = JSON.parse(fs.readFileSync("sports_data.json", "utf8"));
const usersData = {};

const token = "–¢—É—Ç –º–∞—î –±—É—Ç–∏ —Ç–æ–∫–µ–Ω";
const bot = new TelegramBot(token, { polling: true });

const mainMenu = {
  reply_markup: {
    keyboard: [
      ["‚öΩ –§—É—Ç–±–æ–ª", "üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª"],
      ["üéæ –¢–µ–Ω—ñ—Å", "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"],
    ],
    resize_keyboard: true,
  },
};

bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  usersData[chatId] = usersData[chatId] || { requests: 0 };
  bot.sendMessage(chatId, "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ! –û–±–µ—Ä—ñ—Ç—å –≤–∏–¥ —Å–ø–æ—Ä—Ç—É:", mainMenu);
});

bot.on("message", (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  if (!usersData[chatId]) usersData[chatId] = { requests: 0 };
  usersData[chatId].requests += 1;

  if (text === "‚öΩ –§—É—Ç–±–æ–ª" || text === "üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª" || text === "üéæ –¢–µ–Ω—ñ—Å") {
    const sport = text
      .replace(/[‚öΩüèÄüéæ]/g, "")
      .trim()
      .toLowerCase();
    const results = sportsData[sport];
    if (results) {
      let response = `–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –º–∞—Ç—á—ñ–≤ ${text}:\n\n`;
      results.forEach((match) => {
        response += `${match.teams} - ${match.score}\n`;
      });
      bot.sendMessage(chatId, response, mainMenu);
    } else {
      bot.sendMessage(chatId, "–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤.", mainMenu);
    }
  } else if (text === "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞") {
    bot.sendMessage(
      chatId,
      `–í–∏ –∑—Ä–æ–±–∏–ª–∏ ${usersData[chatId].requests} –∑–∞–ø–∏—Ç—ñ–≤.`,
      mainMenu
    );
  } else {
    bot.sendMessage(chatId, "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∑ –º–µ–Ω—é.", mainMenu);
  }
});

console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π...");
